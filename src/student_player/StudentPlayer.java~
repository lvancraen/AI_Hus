package student_player;

import hus.HusBoardState;
import hus.HusPlayer;
import hus.HusMove;


import java.io.File;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;

import java.util.ArrayList;
import java.util.Random;


import student_player.node.Node;

/** A Hus player submitted by a student. */
public class StudentPlayer extends HusPlayer {

    /** You must modify this constructor to return your student number.
     * This is important, because this is what the code that runs the
     * competition uses to associate you with your agent.
     * The constructor should do nothing else. */
    public StudentPlayer() { super("260513906"); }
    Random rand = new Random();
    /** This is the primary method that you need to implement.
     * The ``board_state`` object contains the current state of the game,
     * which your agent can use to make decisions. See the class hus.RandomHusPlayer
     * for another example agent. */
    public HusMove chooseMove(HusBoardState board_state)
    {
    	
    	/*
    	createTree(id);
    	Integer idFirstPlayer = board_state.firstPlayer();
    	String firstPlayer = idFirstPlayer.toString();
    	
    	Node<String> root = new Node<String>(firstPlayer);
    	*/
    	int turn = board_state.getTurnPlayer();
    	if (turn == 0) {
	    	int depth = 6;
	    	int height = 0;
	    	
	    	
	    	//abPruning using Nodes instead of arrayList
	    	int min = -10000;
	    	int max = 10000;
	    	ArrayList<HusMove> moves = board_state.getLegalMoves();
	    	Node root = new Node(board_state);
	    	
	    	int temp = -10000;
	    	root = abPruning(root, turn, depth, min, max);
	    	HusMove move = null;
	    	
	    	for (int i=0; i<root.numChildren(); i++) {
	    		if (temp < root.getChildAt(i).getScore()) {
	    			temp = root.getChildAt(i).getScore();
	    			move = moves.get(i);
	    		}
	    	}
	    	return move;
    	} else {
    		int depth = 5;
	    	int height = 0;
	    	
	    	
	    	//abPruning using Nodes instead of arrayList
	    	int min = -10000;
	    	int max = 10000;
	    	ArrayList<HusMove> moves = board_state.getLegalMoves();
	    	Node root = new Node(board_state);
	    	
	    	int temp = -10000;
	    	root = abPruning(root, turn, depth, min, max);
	    	HusMove move = null;
	    	
	    	for (int i=0; i<root.numChildren(); i++) {
	    		if (temp < root.getChildAt(i).getScore()) {
	    			temp = root.getChildAt(i).getScore();
	    			move = moves.get(i);
	    		}
	    	}
	    	return move;
    	}
    	
    	/*
    	//alpha beta pruning
    	int min = -10000;
    	int max = 10000;
    	ArrayList<HusMove> moves = board_state.getLegalMoves();
    	Node root = new Node(board_state);
    	int turn = board_state.getTurnPlayer();
    	int[] temp = aBPTopLevel(root, turn, depth, min, max);
    	HusMove move = moves.get(temp[0]);
    	return move;
    	*/
    	/*
    	 * Monte Carlo Search
    	int turn = board_state.getTurnPlayer();
    	Node n = new Node(board_state);
    	n = monteCarlo(n, depth, turn);
    	double[] temp = new double[2];
    	temp[1] = 0.0;
    	
    	for (int i = 0; i < n.numChildren(); i++) {
    		if (temp[1] < n.getChildAt(i).getWinLoss()) {
    			temp[1] = n.getChildAt(i).getWinLoss();
    			temp[0] = i;
    		}
    	}
    	ArrayList<HusMove> moves = n.getBoard().getLegalMoves();
    	HusMove move = moves.get((int) temp[0]);
    	return move;
    	*/
    }
    
    public Node abPruning(Node n, int turn, int depth, int min, int max) {
    	ArrayList<HusMove> legalMoves = n.getBoard().getLegalMoves();
    	if (depth == 0 || legalMoves.size() == 0) {
    		n.setScore(evaluate(n, turn));
    		return n;
    	}
    	//maximize turn
    	if (turn == n.getBoard().getTurnPlayer()) {
    		n.setScore(min);
    		
    		for (int i = 0; i < legalMoves.size(); i++) {
    			HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    			HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    			cloned_board_state.move(clone_move);
    			
    			Node child = new Node(cloned_board_state);
        		n.addChild(abPruning(child, turn, depth-1, n.getScore(), max));
        		//n.setMove(i);
        		
        		if (n.getChildAt(i).getScore() > n.getScore()) {
        			n.setScore(n.getChildAt(i).getScore());
        		} 
        		if (n.getScore() >= max) {
        			n.setScore(max);
        			return n;
        		}
        	}
    		return n;
    	//minimize turn
    	} else {
    		n.setScore(max);
    		
    		for(int i = 0; i < legalMoves.size(); i++) {
    			HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    			HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    			cloned_board_state.move(clone_move);
    			
    			Node child = new Node(cloned_board_state);
    			n.addChild(abPruning(child, turn, depth-1, min, n.getScore()));
    			
    			if (n.getChildAt(i).getScore() < n.getScore()) {
    				n.setScore(n.getChildAt(i).getScore());
    			}
    			if (n.getScore() <= min) {
    				n.setScore(min);
    				return n;
    			}
    		}
    		return n;
    	}
    	
    }
    
    public int evaluate(Node n, int turn) {
    	int seeds = 0;
    	int[][] noSeeds = n.getBoard().getPits();
    	for (int i = 0; i<noSeeds[turn].length; i++) {
    		seeds = seeds + noSeeds[turn][i];
    	}
    	return seeds;
    }
    
    public Node monteCarlo(Node n, int depth, int turn) {
    	ArrayList<HusMove> legalMoves = n.getBoard().getLegalMoves();
    	if (depth == 0 || legalMoves.size() == 0) {
    		if (depth == 0) {
	    		HusBoardState cloned_board = (HusBoardState) n.getBoard().clone();
	    		tempPlay:
	    		for(int k = 0; k < 20; k++){
	    			int tempTurn = n.getBoard().getTurnPlayer();
			    	if (cloned_board.getLegalMoves().size() != 0) {
			    		ArrayList<HusMove> cloned_board_LegalMoves = cloned_board.getLegalMoves();
			    		HusMove randMove = cloned_board_LegalMoves.get(rand.nextInt(cloned_board_LegalMoves.size()));
			    		cloned_board.move(randMove);
			    	} else {
			    		break tempPlay;
			    	}
			    	if(tempTurn == cloned_board.getTurnPlayer()) {
			    		if (tempTurn == turn) {
			    			n.setLoss();
			    		} else {
			    			n.setWin();
			    		}
	    			} else {
	    				if (tempTurn == turn) {
			    			n.setWin();
			    		} else {
			    			n.setLoss();
			    		}
	    			}
	    		}
    		}
    		if (legalMoves.size() == 0) {
        		if(turn == n.getBoard().getTurnPlayer()) {
    	    		n.setLoss();
    	    	} else {
    	    		n.setWin();
    	    	}
    		}
    		n.setScore(evaluate(n,turn));
	    	return n;
    	}
    	
    	for (int i = 0; i < legalMoves.size(); i++) {
    		HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    		HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    		cloned_board_state.move(clone_move);

    		Node child = new Node(cloned_board_state);
    		
    		child = monteCarlo(child, depth-1, turn);
    		
    		n.setWinLoss(child);
    		if (n.getScore() < child.getScore()) {
    			n.setScore(child.getScore());
    		}
    		n.addChild(child);
    		
    	}
    	return n;
    }
    
    
   
    public int[] aBPTopLevel(Node n, int turn, int depth, int min, int max) {
    	int value = min;
    	int value1;
    	ArrayList<HusMove> legalMoves = n.getBoard().getLegalMoves();
    	ArrayList<Integer> scores = new ArrayList<Integer>();

    	int[] temp = new int[2];
    	temp[0] = 0;
    	temp[1] = -10000;
    		
    	for (int i = 0; i < legalMoves.size(); i++) {

    		HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    		HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    		cloned_board_state.move(clone_move);

    		Node child = new Node(cloned_board_state);
    		
    		scores.add(i, alphaBetaPruning(child, turn, depth-1, value, max));
        }
    	for (int j = 0; j < scores.size(); j++) {
    		if (temp[1] < scores.get(j)) {
    			temp[0] = j;
    			temp[1] = scores.get(j);
    		}
    	}
    	return temp;
    }
    
    public int alphaBetaPruning(Node n, int turn, int depth, int min, int max) {
    	int value;
    	int value1;
    	ArrayList<HusMove> legalMoves = n.getBoard().getLegalMoves();
    	if (depth == 0 || legalMoves.size() == 0) {
    		
    		return evaluate(n, turn);
    	}
    	//maximize turn
    	if (turn == n.getBoard().getTurnPlayer()) {
    		value = min;
    		
    		for (int i = 0; i < legalMoves.size(); i++) {
    			HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    			HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    			cloned_board_state.move(clone_move);
    			Node child = new Node(cloned_board_state);
        		value1 = alphaBetaPruning(child, turn, depth-1, value, max);
        		if (value1 > value) {
        			value = value1;
        		} 
        		if (value >= max) {
        			return max;
        		}
        	}
    		return value;
    	//minimize turn
    	} else {
    		value = max;
    		
    		for(int i = 0; i < legalMoves.size(); i++) {
    			HusBoardState cloned_board_state = (HusBoardState) n.getBoard().clone();
    			HusMove clone_move = n.getBoard().getLegalMoves().get(i);
    			cloned_board_state.move(clone_move);
    			Node child = new Node(cloned_board_state);
    			value1 = alphaBetaPruning(child, turn, depth-1, min, value);
    			if (value1 < value) {
    				value = value1;
    			}
    			if (value <= min) {
    				return min;
    			}
    		}
    		return value;
    	}
    	
    }
   
    
    public Node createTree(String id) 
    {
    	if (id == "0") {
	    	File folder = null;
	    	try {
	    		folder = new File("/Users/lvancraen/Documents/COMP 424/mcgill_comp424_project_winter2016/logs/");
	    		File[] files = folder.listFiles();
	    		for(File f: files) {
	    			System.out.println(f.getName());
	    			if (f.getName().equals(".DS_Store") == false  && f.getName().equals("outcomes.txt") == false) {
	    				BufferedReader br = new BufferedReader(new FileReader(f));
	        			String line = br.readLine();
	        			reading:
		        			while (line != null) {
		        			    if (line.contains("START Player-1")) {
		        			    	String phrase = line;
		    			    		String delims = "[ ]";
		    			    		String[] tokens = phrase.split(delims);
		    			    		if (tokens[2] == "260513906") {
		    			    			break reading;
		    			    		} else {
		    			    			Integer depth = 1;
		    			    			Integer temp = depth +1;
		    			    			//Node myTurn = new Node("myTurn"+depth);
		    			    			//Node oppTurn = new Node("oppTurn"+temp);
		    			    			line = br.readLine();
		            			    	if (line != null) {
		    	        			    	while (line.contains("GAMEOVER") == false) {
		    	        			    		String phrase1 = line;
		    	        			    		String delims1 = "[ ]";
		    	        			    		String[] tokens1 = phrase1.split(delims1);
		    	        			    		//addChildren(line, tokens1[1], tokens1[2], depth, myTurn);
		    	            			    	line = br.readLine();
		    	            			    	depth++;
		    	        			    	}
		            			    	}
		    			    		}
		        			    	
		            			    continue;
		        			    } else {
		            			    line = br.readLine();
		            			}
		        			}   
	        			br.close();
	    			}
	    		}
	    		
	    	} catch(Exception e) {
	    		e.printStackTrace();
	    	}	
    	}
    	return null;
    }
}
